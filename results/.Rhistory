fit$merge
plot(fit)
fit1<-hclust(d,method='ward.D')
fit1$merge
plot(fit1)
rect.hclust(fit1,k=3,border='red')
comp<-read.table("H:\\fin.txt", header=T,row.names=2)
compcomp2<-scale(comp[,1])
single<-hclust(dist(comp2),method='single')
complete<-hclust(dist(comp2),method='complete')
complete<-hclust(dist(comp2),method='ward.D')
fit$merge
plot(fit)
fit1<-hclust(d,method='ward.D')
fit1$merge
plot(fit1)
rect.hclust(fit1,k=3,border='red')
comp<-read.table("H:\\fin.txt", header=T,row.names=2)
comp2<-scale(comp[,1])
single<-hclust(dist(comp2),method='single')
complete<-hclust(dist(comp2),method='complete')
complete<-hclust(dist(comp2),method='ward.D')
comp2<-scale(comp[,1])
fit$merge
FIN <- read.csv("~/Portugal/Stats/FIN.txt", sep="")
View(FIN)
dataset <- read.delim("C:/JavaPrograms/GP_Project/dataset.txt", header=FALSE)
View(dataset)
cov(dataset)
cor(dataset)
install.packages("library")
install.packages("psych")
cormat<-cor(dataset)
cormat
solution<-(r=cormat,nfactors=9,rotate="oblimin",fm="pa")
solution<-fa(r=cormat,nfactors=9,rotate="oblimin",fm="pa")
library(psych)
solution<-fa(r=cormat,nfactors=9,rotate="oblimin",fm="pa")
install.packages("GPArotation")
solution<-fa(r=cormat,nfactors=9,rotate="oblimin",fm="pa")
solution<-fa(r=cormat,nfactors=2,rotate="oblimin",fm="pa")
solution<-fa(r=cormat,nfactors=6,rotate="oblimin",fm="pa")
solution<-fa(r=cormat,nfactors=6,rotate="oblimin")
solution
newds<-dataset[1:12]
cormat<-cor(newds)
solution<-fa(r=cormat,nfactors=9,rotate="oblimin")
solution<-fa(r=cormat,nfactors=9)
solution<-fa(r=cormat,nfactors=6)
solution
std(dataset
)
scale(newds)
scaled=scale(newds)
scaled[,"V13"]<-dataset[,"V13"]
scaled[,"V13"]<-dataset[,13]
scaled[,13]<-dataset[,13]
setwd("~/Portugal/Error_Space_GP/ESGSGP/GSGP/results/")
outputs <- read.csv("outputs.txt", sep=",")
##below is only for removing last empty column of outputs - clean this up in java instead
outputs<-outputs[,-ncol(outputs)]
population<-read.csv("population.txt",sep=",")
# trainingData<-read.table("../ppb_training.txt", quote="\"", comment.char="")
# unseenData<-read.table("../ppb_unseen.txt",quote="\"", comment.char="")
# trainingTarget=t(trainingData[,ncol(trainingData)])
trainingData<-read.table("../Dataset_bioav/test1_.txt", quote="\"", comment.char="")
unseenData<-read.table("../Dataset_bioav/train1_.txt",quote="\"", comment.char="")
trainingTarget=t(trainingData[,ncol(trainingData)])
trainingLength = 252
unseenLength = 107
trainingErrorEnd =trainingLength+3
unseenErrorEnd = unseenLength+3
trainingErrors<-outputs[,1:trainingErrorEnd]
trainingOutputs<-outputs[,-4:-trainingErrorEnd]
subsetOutput <- subset(trainingOutputs, ID==1742)
subsetError <- subset(trainingErrors, ID==1742)
theta <- acos( sum(subsetError[,4:trainingErrorEnd][1,]*subsetError[,4:trainingErrorEnd][2,]) / ( sqrt(sum(subsetError[,4:trainingErrorEnd][1,] * subsetError[,4:trainingErrorEnd][1,])) * sqrt(sum(subsetError[,4:trainingErrorEnd][2,] * subsetError[,4:trainingErrorEnd][2,])) ) )
ratios=subsetError[,4:trainingErrorEnd][1,]/subsetError[,4:trainingErrorEnd][2,]
k=1.03
reconstructed =1/(1-k)*subsetOutput[1,4:trainingErrorEnd]-k/(1-k)*subsetOutput[2,4:trainingErrorEnd]
rmseTraining=sqrt(mean((reconstructed-trainingTarget)^2))
k=0.96
reconstructed =1/(1-k)*subsetOutput[1,4:trainingErrorEnd]-k/(1-k)*subsetOutput[2,4:trainingErrorEnd]
rmseTraining=sqrt(mean((reconstructed-trainingTarget)^2))
View(ratios)
ratios=sort(ratios)
subsetOutput <- subset(trainingOutputs, ID==1742)
subsetError <- subset(trainingErrors, ID==1742)
theta <- acos( sum(subsetError[,4:trainingErrorEnd][1,]*subsetError[,4:trainingErrorEnd][2,]) / ( sqrt(sum(subsetError[,4:trainingErrorEnd][1,] * subsetError[,4:trainingErrorEnd][1,])) * sqrt(sum(subsetError[,4:trainingErrorEnd][2,] * subsetError[,4:trainingErrorEnd][2,])) ) )
ratios=subsetError[,4:trainingErrorEnd][1,]/subsetError[,4:trainingErrorEnd][2,]
ratios=sort(ratios)
ratios[126]
ratios[127]
ratios[125]
k=0.964
reconstructed =1/(1-k)*subsetOutput[1,4:trainingErrorEnd]-k/(1-k)*subsetOutput[2,4:trainingErrorEnd]
rmseTraining=sqrt(mean((reconstructed-trainingTarget)^2))
k=0.96
reconstructed =1/(1-k)*subsetOutput[1,4:trainingErrorEnd]-k/(1-k)*subsetOutput[2,4:trainingErrorEnd]
rmseTraining=sqrt(mean((reconstructed-trainingTarget)^2))
k=0.963
reconstructed =1/(1-k)*subsetOutput[1,4:trainingErrorEnd]-k/(1-k)*subsetOutput[2,4:trainingErrorEnd]
rmseTraining=sqrt(mean((reconstructed-trainingTarget)^2))
k=0.962
reconstructed =1/(1-k)*subsetOutput[1,4:trainingErrorEnd]-k/(1-k)*subsetOutput[2,4:trainingErrorEnd]
rmseTraining=sqrt(mean((reconstructed-trainingTarget)^2))
##below was for checking error values
k=0.961
reconstructed =1/(1-k)*subsetOutput[1,4:trainingErrorEnd]-k/(1-k)*subsetOutput[2,4:trainingErrorEnd]
rmseTraining=sqrt(mean((reconstructed-trainingTarget)^2))
k=0.96
reconstructed =1/(1-k)*subsetOutput[1,4:trainingErrorEnd]-k/(1-k)*subsetOutput[2,4:trainingErrorEnd]
rmseTraining=sqrt(mean((reconstructed-trainingTarget)^2))
setwd("~/Portugal/Error_Space_GP/ESGSGP/GSGP/results/")
outputs <- read.csv("outputs.txt", sep=",")
##below is only for removing last empty column of outputs - clean this up in java instead
outputs<-outputs[,-ncol(outputs)]
population<-read.csv("population.txt",sep=",")
# trainingData<-read.table("../ppb_training.txt", quote="\"", comment.char="")
# unseenData<-read.table("../ppb_unseen.txt",quote="\"", comment.char="")
# trainingTarget=t(trainingData[,ncol(trainingData)])
trainingData<-read.table("../Dataset_bioav/test1_.txt", quote="\"", comment.char="")
unseenData<-read.table("../Dataset_bioav/train1_.txt",quote="\"", comment.char="")
trainingTarget=t(trainingData[,ncol(trainingData)])
trainingLength = 252
unseenLength = 107
trainingErrorEnd =trainingLength+3
unseenErrorEnd = unseenLength+3
trainingErrors<-outputs[,1:trainingErrorEnd]
trainingOutputs<-outputs[,-4:-trainingErrorEnd]
subsetOutput <- subset(trainingOutputs, ID==1710)
subsetError <- subset(trainingErrors, ID==1710)
theta <- acos( sum(subsetError[,4:trainingErrorEnd][1,]*subsetError[,4:trainingErrorEnd][2,]) / ( sqrt(sum(subsetError[,4:trainingErrorEnd][1,] * subsetError[,4:trainingErrorEnd][1,])) * sqrt(sum(subsetError[,4:trainingErrorEnd][2,] * subsetError[,4:trainingErrorEnd][2,])) ) )
ratios=subsetError[,4:trainingErrorEnd][1,]/subsetError[,4:trainingErrorEnd][2,]
ratios=sort(ratios)
k=0.96
reconstructed =1/(1-k)*subsetOutput[1,4:trainingErrorEnd]-k/(1-k)*subsetOutput[2,4:trainingErrorEnd]
rmseTraining=sqrt(mean((reconstructed-trainingTarget)^2))
View(population)
ratios[125]
ratios[123]
ratios[120]
k=0.962
reconstructed =1/(1-k)*subsetOutput[1,4:trainingErrorEnd]-k/(1-k)*subsetOutput[2,4:trainingErrorEnd]
rmseTraining=sqrt(mean((reconstructed-trainingTarget)^2))
k=0.9601
reconstructed =1/(1-k)*subsetOutput[1,4:trainingErrorEnd]-k/(1-k)*subsetOutput[2,4:trainingErrorEnd]
rmseTraining=sqrt(mean((reconstructed-trainingTarget)^2))
k=0.96
reconstructed =1/(1-k)*subsetOutput[1,4:trainingErrorEnd]-k/(1-k)*subsetOutput[2,4:trainingErrorEnd]
k=0.959
reconstructed =1/(1-k)*subsetOutput[1,4:trainingErrorEnd]-k/(1-k)*subsetOutput[2,4:trainingErrorEnd]
rmseTraining=sqrt(mean((reconstructed-trainingTarget)^2))
k=0.958
reconstructed =1/(1-k)*subsetOutput[1,4:trainingErrorEnd]-k/(1-k)*subsetOutput[2,4:trainingErrorEnd]
rmseTraining=sqrt(mean((reconstructed-trainingTarget)^2))
